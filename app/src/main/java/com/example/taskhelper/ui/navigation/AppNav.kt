package com.example.taskhelper.ui.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.example.taskhelper.ui.task.HomeScreen

/**
 * Â¿QuÃ© es, para quÃ© sirve y dÃ³nde se usa?
 * - AppNav define el "grÃ¡fico" de navegaciÃ³n de la app usando Navigation-Compose.
 * - Â¿Para quÃ© sirve? Centraliza rutas y destinos (pantallas) y cÃ³mo se conectan.
 * - Â¿DÃ³nde se usa? En la raÃ­z de UI (por ejemplo, en tu MainActivity o AppRoot), pasando un NavHostController.
 * - Â¿Por quÃ© asÃ­? Hoist del NavController: lo crea el nivel superior (single source of truth) y se inyecta aquÃ­.
 */
object Routes {                    // Objeto contenedor de rutas para evitar strings mÃ¡gicos repartidos.
    const val HOME = "home"        // Ruta de la pantalla Home. Se usa en startDestination y al declarar el destino.
}

@Composable
fun AppNav(                        // FunciÃ³n Composable que construye el NavHost con todos los destinos.
    navController: NavHostController // El controlador de navegaciÃ³n lo provee el nivel superior (no se crea aquÃ­).
) {
    NavHost(                       // NavHost "aloja" el grÃ¡fico de navegaciÃ³n y gestiona el back stack.
        navController = navController, // Controlador compartido: permite navegar desde distintas pantallas.
        startDestination = Routes.HOME  // Destino inicial al lanzar la app (pantalla Home).
    ) {
        composable(route = Routes.HOME) { // DeclaraciÃ³n del destino "home": cuando la ruta sea "home"...
            HomeScreen()                  // ...se compone la pantalla Home. El VM se resolverÃ¡ vÃ­a Hilt.
            // Nota: si HomeScreen necesitara navegar, puede obtener el navController con:
            // val nav = LocalNavigationProvider.current (si creas un CompositionLocal) o pÃ¡salo como parÃ¡metro.
        }

        // ðŸ”œ AquÃ­ irÃ¡n mÃ¡s destinos (por feature):
        // composable(route = "${Routes.TASK_DETAIL}/{taskId}") { backStackEntry ->
        //     val id = backStackEntry.arguments?.getString("taskId")?.toLong()
        //     TaskDetailScreen(taskId = id)
        // }
    }
}
